package com.mparticle.internal;


import android.webkit.JavascriptInterface;

import com.mparticle.MParticle;
import com.mparticle.MParticle.EventType;
import com.mparticle.commerce.CommerceEvent;
import com.mparticle.commerce.Impression;
import com.mparticle.commerce.Product;
import com.mparticle.commerce.Promotion;
import com.mparticle.commerce.TransactionAttributes;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * Javascript interface to be used for {@code Webview} analytics.
 *
 * This class knows how to parse JSON that has been generated by the mParticle Javascript SDK, basically
 * creating a bridge between the two SDKs.
 *
 */
public class MParticleJSInterface {
    public static final String INTERFACE_NAME = "mParticleAndroid";

    //the following keys are sent from the JS library as a part of each event
    private static final String JS_KEY_EVENT_NAME = "EventName";
    private static final String JS_KEY_EVENT_CATEGORY = "EventCategory";
    private static final String JS_KEY_EVENT_ATTRIBUTES = "EventAttributes";
    private static final String JS_KEY_EVENT_DATATYPE = "EventDataType";
    private static final String JS_KEY_OPTOUT = "OptOut";

    private static final int JS_MSG_TYPE_SS = 1;
    private static final  int JS_MSG_TYPE_SE = 2;
    private static final int JS_MSG_TYPE_PV = 3;
    private static final int JS_MSG_TYPE_PE = 4;
    private static final int JS_MSG_TYPE_CR = 5;
    private static final int JS_MSG_TYPE_OO = 6;
    private static final int JS_MSG_TYPE_COMMERCE = 16;

    private static final String errorMsg = "Error processing JSON data from Webview: %s";

    private static final String EVENT_NAME = "EventName";
    private static final String CURRENCY_CODE = "CurrencyCode";
    private static final String CHECKOUT_STEP = "CheckoutStep";
    private static final String CHECKOUT_OPTIONS = "CheckoutOptions";
    private static final String PRODUCT_ACTION = "ProductAction";
    private static final String PRODUCT_LIST = "ProductList";
    private static final String PRODUCT_ACTION_TYPE = "ProductActionType";
    private static final String PROMOTION_ACTION = "PromotionAction";
    private static final String PROMOTION_LIST = "PromotionList";
    private static final String PROMOTION_ACTION_TYPE = "PromotionActionType";
    private static final String PRODUCT_IMPRESSIONS = "ProductImpressions";

    private static final String AFFILIATION = "Affiliation";
    private static final String TOTAL_AMOUNT = "TotalAmount";
    private static final String SHIPPING_AMOUNT = "ShippingAmount";
    private static final String TAX_AMOUNT = "TaxAmount";
    private static final String TRANSACTION_ID = "TransactionId";

    private static final String NAME = "Name";
    private static final String SKU = "Sku";
    private static final String PRICE = "Price";
    private static final String QUANTITY = "Quantity";
    private static final String BRAND = "Brand";
    private static final String VARIANT = "Variant";
    private static final String CATEGORY = "Category";
    private static final String POSITION = "Position";
    private static final String COUPON_CODE = "CouponCode";
    private static final String ATTRIBUTES = "Attributes";

    private static final String PROMOTION_ID = "Id";
    private static final String PROMOTION_NAME = "Name";
    private static final String PROMOTION_CREATIVE = "Creative";
    private static final String PROMOTION_POSITION = "Position";

    private static final String PRODUCT_IMPRESSION_NAME = "ProductImpressionList";

    public MParticleJSInterface() {
        Product.setEqualityComparator(new Product.EqualityComparator() {
            @Override
            public boolean equals(Product product1, Product product2) {
                if (product1.getSku() == null) {
                    return product2.getSku() == null;
                } else {
                    return product1.getSku().equals(product2.getSku());
                }
            }
        });
    }

    @JavascriptInterface
    public void logEvent(String json) {
        try {
            JSONObject event = new JSONObject(json);

            String name = event.getString(JS_KEY_EVENT_NAME);
            EventType eventType = convertEventType(event.getInt(JS_KEY_EVENT_CATEGORY));
            Map<String, String> eventAttributes = convertToMap(event.optJSONObject(JS_KEY_EVENT_ATTRIBUTES));

            int messageType = event.getInt(JS_KEY_EVENT_DATATYPE);
            switch (messageType){
                case JS_MSG_TYPE_PE:
                    MParticle.getInstance().logEvent(name,
                            eventType,
                            eventAttributes);
                    break;
                case JS_MSG_TYPE_PV:
                    MParticle.getInstance().logScreen(name,
                            eventAttributes);
                    break;
                case JS_MSG_TYPE_OO:
                    MParticle.getInstance().setOptOut(event.optBoolean(JS_KEY_OPTOUT));
                    break;
                case JS_MSG_TYPE_CR:
                    MParticle.getInstance().logError(name, eventAttributes);
                    break;
                case JS_MSG_TYPE_COMMERCE:
                    CommerceEvent commerceEvent = toCommerceEvent(event);
                    if (commerceEvent == null) {
                        Logger.warning("CommerceEvent empty, or unparseable");
                        break;
                    }
                    MParticle.getInstance().logEvent(commerceEvent);
                    break;
                case JS_MSG_TYPE_SE:
                case JS_MSG_TYPE_SS:
                    //swallow session start and end events, the native SDK will handle those.
                default:

            }

        } catch (JSONException jse) {
            Logger.warning(String.format(errorMsg, jse.getMessage()));
        }
    }

    @JavascriptInterface
    public void setUserTag(String json){
        try{
            JSONObject attribute = new JSONObject(json);
            MParticle.getInstance().setUserTag(attribute.getString("key"));
        }catch (JSONException jse){
            Logger.warning(String.format(errorMsg, jse.getMessage()));
        }
    }

    @JavascriptInterface
    public void removeUserTag(String json){
        try{
            JSONObject attribute = new JSONObject(json);
            MParticle.getInstance().removeUserTag(attribute.getString("key"));
        }catch (JSONException jse){
            Logger.warning(String.format(errorMsg, jse.getMessage()));
        }
    }

    @JavascriptInterface
    public void setUserAttribute(String json){
        try {
            JSONObject attribute = new JSONObject(json);
            MParticle.getInstance().setUserAttribute(attribute.getString("key"), String.valueOf(attribute.get("value")));
        } catch (JSONException jse) {
            Logger.warning(String.format(errorMsg, jse.getMessage()));
        }
    }

    @JavascriptInterface
    public void removeUserAttribute(String json){
        try{
            JSONObject attribute = new JSONObject(json);
            MParticle.getInstance().removeUserAttribute(attribute.getString("key"));
        }catch (JSONException jse){
            Logger.warning(String.format(errorMsg, jse.getMessage()));
        }
    }

    @JavascriptInterface
    public void setSessionAttribute(String json){
        try {
            JSONObject attribute = new JSONObject(json);
            MParticle.getInstance().setSessionAttribute(attribute.getString("key"), attribute.getString("value"));
        } catch (JSONException jse) {
            Logger.warning(String.format(errorMsg, jse.getMessage()));
        }
    }

    @JavascriptInterface
    public void setUserIdentity(String json){
        try {
            JSONObject attribute = new JSONObject(json);
            MParticle.getInstance().setUserIdentity(attribute.getString("Identity"), MParticle.IdentityType.parseInt(attribute.getInt("Type")));
        } catch (JSONException jse) {
            Logger.warning(String.format(errorMsg, jse.getMessage()));
        }
    }

    @JavascriptInterface
    public void removeUserIdentity(String json){
        try{
            JSONObject attribute = new JSONObject(json);
            MParticle.getInstance().removeUserIdentity(attribute.getString("key"));
        }catch (JSONException jse){
            Logger.warning(String.format(errorMsg, jse.getMessage()));
        }
    }

    @JavascriptInterface
    public void addToProductBag(String productBagName, String json){
        try {
            JSONObject attribute = new JSONObject(json);
            Product product = toProduct(attribute);
            if (product != null) {
                MParticle.getInstance().ProductBags().addProduct(productBagName, product);
            } else {
                Logger.warning(String.format(errorMsg, "unable to convert String to Product: " + json));
            }
        } catch (JSONException jse) {
            Logger.warning(String.format(errorMsg, jse.getMessage()));
        }
    }

    @JavascriptInterface
    public boolean removeFromProductBag(String productBagName, String json) {
        try {
            JSONObject attribute = new JSONObject(json);
            Product product = toProduct(attribute);
            if (product != null) {
                return MParticle.getInstance().ProductBags().removeProduct(productBagName, product);
            } else {
                Logger.warning(String.format(errorMsg, "unable to convert String to Product: " + json));
            }
        } catch (JSONException jse) {
            Logger.warning(String.format(errorMsg, jse.getMessage()));
        }
        return false;
    }

    @JavascriptInterface
    public void clearProductBag(String productBagName) {
        MParticle.getInstance().ProductBags().clearProductBag(productBagName);
    }

    @JavascriptInterface
    public void addToCart(String json) {
        try {
            JSONObject attribute = new JSONObject(json);
            Product product = toProduct(attribute);
            if (product != null) {
                MParticle.getInstance().Commerce().cart().add(product);
            } else {
                Logger.warning(String.format(errorMsg, "unable to convert String to Product: " + json));
            }
        } catch (JSONException jse) {
            Logger.warning(String.format(errorMsg, jse.getMessage()));
        }
    }

    @JavascriptInterface
    public void removeFromCart(String json) {
        try {
            JSONObject attribute = new JSONObject(json);
            Product product = toProduct(attribute);
            if (product != null) {
                MParticle.getInstance().Commerce().cart().remove(product);
            } else {
                Logger.warning(String.format(errorMsg, "unable to convert String to Product: " + json));
            }
        } catch (JSONException jse) {
            Logger.warning(String.format(errorMsg, jse.getMessage()));
        }
    }

    @JavascriptInterface
    public void clearCart() {
        MParticle.getInstance().Commerce().cart().clear();
    }

    @JavascriptInterface
    public void logOut() {
        MParticle.getInstance().logout();
    }

    @JavascriptInterface
    public void setUserAttributeList(String json) {
        try {
            JSONObject jsonObject = new JSONObject(json);
            String key = jsonObject.getString("key");
            JSONArray value = jsonObject.getJSONArray("value");
            List<String> attributes = new ArrayList<String>();
            for (int i = 0; i < value.length(); i++) {
                attributes.add(String.valueOf(value.get(i)));
            }
            MParticle.getInstance().setUserAttributeList(key, attributes);
        } catch (JSONException jse) {
            Logger.warning(String.format(errorMsg, jse.getMessage()));
        }
    }

    @JavascriptInterface
    public void removeAllUserAttributes() {
        for (String userAttribute: MParticle.getInstance().getAllUserAttributes().keySet()) {
            MParticle.getInstance().removeUserAttribute(userAttribute);
        }
    }

    @JavascriptInterface
    public String getUserAttributesLists() {
        Map<String, List<String>> attributeMap = MParticle.getInstance().getUserAttributeLists();
        JSONArray jsonArray = new JSONArray();
        for (Map.Entry<String, List<String>> entry: attributeMap.entrySet()) {
            try {
                JSONObject jsonObject = new JSONObject();
                jsonObject.put("key", entry.getKey());
                JSONArray jsonArray1 = new JSONArray();
                for (String attribute: entry.getValue()) {
                    jsonArray1.put(attribute);
                }
                jsonObject.put("value", jsonArray1.toString());
                jsonArray.put(jsonObject);
            } catch (JSONException jse) {
                Logger.warning(jse.getMessage());
            }
        }
        return jsonArray.toString();
    }

    @JavascriptInterface
    public String getAllUserAttributes() {
        Map<String, Object> attributeMap = MParticle.getInstance().getAllUserAttributes();
        JSONArray jsonArray = new JSONArray();
        for (Map.Entry<String, Object> entry: attributeMap.entrySet()) {
            try {
                JSONObject jsonObject = new JSONObject();
                jsonObject.put("key", entry.getKey());
                jsonObject.put("value", entry.getValue().toString());
                jsonArray.put(jsonObject);
            } catch (JSONException jse) {
                Logger.warning(jse.getMessage());
            }
        }
        return jsonArray.toString();
    }

    private static Map<String, String> convertToMap(JSONObject attributes) {
        if (null != attributes) {
            Iterator keys = attributes.keys();

            Map<String, String> parsedAttributes = new HashMap<String, String>();

            while (keys.hasNext()) {
                String key = (String) keys.next();
                try {
                    parsedAttributes.put(key, attributes.getString(key));
                } catch (JSONException e) {
                    Logger.warning("Could not parse event attribute value");
                }
            }

            return parsedAttributes;
        }

        return null;
    }

    private EventType convertEventType(int eventType) {
        switch (eventType) {
            case 1:
                return EventType.Navigation;
            case 2:
                return EventType.Location;
            case 3:
                return EventType.Search;
            case 4:
                return EventType.Transaction;
            case 5:
                return EventType.UserContent;
            case 6:
                return EventType.UserPreference;
            case 7:
                return EventType.Social;
            default:
                return EventType.Other;
        }
    }

    protected CommerceEvent toCommerceEvent(JSONObject jsonObject) {
        CommerceEvent.Builder builder = null;

        //try to instantiate CommerceEvent with a Product and add Products
        JSONObject productActionObj = jsonObject.optJSONObject(PRODUCT_ACTION);
        if (productActionObj != null) {
            String productAction = productActionObj.optString(PRODUCT_ACTION_TYPE);
            JSONArray productArray = productActionObj.optJSONArray(PRODUCT_LIST);
            if (productAction != null && productArray != null) {
                for (int i = 0; i < productArray.length(); i++) {
                    Product product = toProduct(productArray.optJSONObject(i));
                        if (builder == null) {
                            builder = new CommerceEvent.Builder(productAction, product);
                        } else {
                            builder.addProduct(product);
                        }
                }
                if (builder == null) {
                    builder = new CommerceEvent.Builder(productAction, (Product)null);
                }
                TransactionAttributes transactionAttributes = getTransactionAttributes(productActionObj);
                if (transactionAttributes != null) {
                    builder.transactionAttributes(transactionAttributes);
                }
                builder.checkoutStep(productActionObj.optInt(CHECKOUT_STEP));
                builder.checkoutOptions(productActionObj.optString(CHECKOUT_OPTIONS));
            }
        }

        //try and instantiate CommerceEvent with a Promotion or add Promotions
        JSONObject promotionActionObj = jsonObject.optJSONObject(PROMOTION_ACTION);
        if (promotionActionObj != null) {
            String promotionAction = promotionActionObj.optString(PROMOTION_ACTION_TYPE);
            JSONArray promotionArray = promotionActionObj.optJSONArray(PROMOTION_LIST);
            if (promotionAction != null && promotionArray != null) {
                for (int i = 0; i < promotionArray.length(); i++) {
                    Promotion promotion = toPromotion(promotionArray.optJSONObject(i));
                        if (builder == null) {
                            builder = new CommerceEvent.Builder(promotionAction, promotion);
                        } else {
                            builder.addPromotion(promotion);
                        }
                }
                if (builder == null) {
                    builder = new CommerceEvent.Builder(promotionAction, (Promotion)null);
                }
            }
        }

        //try and instantiate CommerceEvent with an Impression or add Impressions
        JSONArray impressionList = jsonObject.optJSONArray(PRODUCT_IMPRESSIONS);
        if (impressionList != null) {
            for (int i = 0; i < impressionList.length(); i++) {
                Impression impression = toImpression(impressionList.optJSONObject(i));
                if (impression != null) {
                    if (builder == null) {
                        builder = new CommerceEvent.Builder(impression);
                    } else {
                        builder.addImpression(impression);
                    }
                }
            }
        }
        if (builder == null) {
            return null;
        }
        Map<String, String> customAttributes = getCustomAttributes(jsonObject);
        if (customAttributes != null) {
            builder.customAttributes(customAttributes);
        }
        builder.currency(jsonObject.optString(CURRENCY_CODE, null));
        builder.internalEventName(jsonObject.optString(EVENT_NAME));
        return builder.build();
    }
    
    private TransactionAttributes getTransactionAttributes(JSONObject jsonObject) {
        TransactionAttributes attributes = null;
        if (jsonObject != null &&
                (jsonObject.has(TRANSACTION_ID) ||
                jsonObject.has(AFFILIATION) ||
                jsonObject.has(COUPON_CODE) ||
                jsonObject.has(TOTAL_AMOUNT) ||
                jsonObject.has(TAX_AMOUNT) ||
                jsonObject.has(SHIPPING_AMOUNT))) {
            attributes = new TransactionAttributes();
            attributes
                    .setId(jsonObject.optString(TRANSACTION_ID, attributes.getId()))
                    .setAffiliation(jsonObject.optString(AFFILIATION, attributes.getAffiliation()))
                    .setCouponCode(jsonObject.optString(COUPON_CODE, attributes.getCouponCode()))
                    .setRevenue(jsonObject.optDouble(TOTAL_AMOUNT))
                    .setTax(jsonObject.optDouble(TAX_AMOUNT))
                    .setShipping(jsonObject.optDouble(SHIPPING_AMOUNT));
        }
        return attributes;
    }

    Product toProduct(JSONObject jsonObject) {
        if (jsonObject == null) { return null; }
        try {
            Product.Builder builder = new Product.Builder(jsonObject.getString(NAME), jsonObject.optString(SKU, null), jsonObject.optDouble(PRICE, 0));
            builder.category(jsonObject.optString(CATEGORY, null));
            builder.couponCode(jsonObject.optString(COUPON_CODE, null));
            if (jsonObject.has(POSITION)) {
                builder.position(jsonObject.optInt(POSITION, 0));
            }
            if (jsonObject.has(QUANTITY)) {
                builder.quantity(jsonObject.optDouble(QUANTITY, 1));
            }
            builder.brand(jsonObject.optString(BRAND, null));
            builder.variant(jsonObject.optString(VARIANT, null));
            Map<String, String> customAttributes = getCustomAttributes(jsonObject);
            if (customAttributes != null) {
                builder.customAttributes(customAttributes);
            }
            return builder.build();
        }
        catch (JSONException ignore) {
            return null;
        }
    }

    private Map<String, String> getCustomAttributes(JSONObject jsonObject) {
        JSONObject attributesJson = jsonObject.optJSONObject(ATTRIBUTES);
        if (attributesJson != null) {
            if (attributesJson.length() > 0) {
                Map<String, String> customAttributes = new HashMap<String, String>();
                Iterator<String> keys = attributesJson.keys();

                while (keys.hasNext()) {
                    String key = keys.next();
                    customAttributes.put(key, attributesJson.optString(key));
                }
                return customAttributes;
            }
        }
        return null;
    }

    private Impression toImpression(JSONObject jsonObject) {
        Impression impression = null;
        if (jsonObject == null) { return impression; }
        if (jsonObject.has(PRODUCT_IMPRESSION_NAME)) {
            JSONArray jsonArray = jsonObject.optJSONArray(PRODUCT_LIST);
            if (jsonArray != null) {
                for (int i = 0; i < jsonArray.length(); i++) {
                    Product product = toProduct(jsonArray.optJSONObject(i));
                    String impressionName = jsonObject.optString(PRODUCT_IMPRESSION_NAME, null);
                    if (product != null) {
                        if (impression == null) {
                            if (!MPUtility.isEmpty(impressionName))
                                impression = new Impression(impressionName, product);
                        } else {
                            impression.addProduct(product);
                        }
                    }
                }
            }
        }
        return impression;
    }
    
    private Promotion toPromotion(JSONObject jsonObject) {
        if (jsonObject == null) {
            return null;
        }
        return new Promotion()
                .setName(jsonObject.optString(PROMOTION_NAME))
                .setCreative(jsonObject.optString(PROMOTION_CREATIVE))
                .setId(jsonObject.optString(PROMOTION_ID))
                .setPosition(jsonObject.optString(PROMOTION_POSITION));
    }
}
